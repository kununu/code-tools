<?php
declare(strict_types=1);

namespace {{ full_namespace }};

{% if templates.hasTemplate('read-model') %}
{% set readModel = templates.getTemplateByType('read-model') %}
use {{ readModel.fqcn }};
{% endif %}
use Kununu\CQRS\Query\QueryHandler as CQRSQueryHandler;

final readonly class {{ classname }} implements CQRSQueryHandler
{
    public function __construct(private RepositoryInterface $repository)
    {
    }

    public function handle(Query $query): {% if readModel is defined %}{{ readModel.classname }}{% endif %}
    {
{% if parameters is defined and parameters|length > 0 %}
{% if parameters|filter(p => p.in == 'path')|length > 0 and parameters|filter(p => p.in == 'query')|length > 0 %}
        return $this->repository->get{{ entity_name }}By{{ parameters|filter(p => p.in == 'path')|first.name|properCapitalize }}WithCriteria($query->{{ parameters|filter(p => p.in == 'path')|first.name }}, $query->criteria);
{% elseif parameters|filter(p => p.in == 'path')|length > 0 %}
        return $this->repository->get{{ entity_name }}By{{ parameters|filter(p => p.in == 'path')|first.name|properCapitalize }}($query->{{ parameters|filter(p => p.in == 'path')|first.name }});
{% elseif parameters|filter(p => p.in == 'query')|length > 0 %}
        return $this->repository->get{{ entity_name }}WithCriteria($query->criteria);
{% endif %}
{% else %}
        return $this->repository->get{{ entity_name }}();
{% endif %}
    }
} 