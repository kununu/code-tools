<?php
declare(strict_types=1);

namespace {{ full_namespace }}{% if tags is defined and tags|length > 0 %}\{{ tags[0] }}{% endif %};

{% if method == 'GET' %}
{% if parameters is defined and parameters|length > 0 and parameters|filter(p => p.in == 'query')|length > 0 %}
{% if templates.hasTemplate('criteria') %}
{% set criteria = templates.getTemplateByType('criteria') %}
use {{ criteria.fqcn }};
{% endif %}
{% endif %}
{% if templates.hasTemplate('query') %}
{% set query = templates.getTemplateByType('query') %}
use {{ query.fqcn }};
{% endif %}
{% if templates.hasTemplate('read-model') %}
{% set readModel = templates.getTemplateByType('read-model') %}
use {{ readModel.fqcn }};
{% endif %}
use Kununu\CQRS\Bundle\Controller\AbstractQueryBusController;
use Kununu\ResponseSerializationBundle\Response\Response;
{% if path is defined and path is not empty and '{' in path %}
use Kununu\Utilities\DTO\Uuid\Uuid;
use Ramsey\Uuid\Exception\InvalidUuidStringException;
{% endif %}
use Symfony\Component\HttpFoundation\Response as ResponseAlias;
{% if parameters is defined and parameters|length > 0 and parameters|filter(p => p.in == 'query')|length > 0 %}
use Symfony\Component\HttpKernel\Attribute\MapQueryParameter;
{% endif %}
{% else %}
{% if templates.hasTemplate('request-data') %}
{% set request = templates.getTemplateByType('request-data') %}
use {{ request.fqcn }};
{% endif %}
{% if templates.hasTemplate('request-resolver') %}
{% set resolver = templates.getTemplateByType('request-resolver') %}
use {{ resolver.fqcn }};
{% endif %}
use {{ namespace }}\Request\Exception\ValidationException;
use {{ namespace }}\UseCase\Command\{{ operation_id|properCapitalize }}\Command;
use Kununu\CQRS\Bundle\Controller\AbstractCommandBusController;
use Kununu\ResponseSerializationBundle\Response\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Attribute\MapRequestPayload;
use Throwable;
{% endif %}

{% if method == 'GET' %}
final class {{ classname }} extends AbstractQueryBusController
{
    public function __invoke(
{% if parameters is defined and parameters|length > 0 %}
{% for param in parameters %}
{% if param.in == 'path' %}
        string ${{ param.name }},
{% endif %}
{% endfor %}
{% for param in parameters %}
{% if param.in == 'query' %}
        #[MapQueryParameter] ?{{ param.schema.type == 'array' ? 'array' : (param.schema.type == 'integer' ? 'int' : (param.schema.type == 'number' ? 'float' : (param.schema.type == 'boolean' ? 'bool' : 'string'))) }} ${{ param.name }} = null{% if not loop.last or not (loop.last and loop.first) %},{% endif %}

{% endif %}
{% endfor %}
{% endif %}
    ): {% if readModel is defined %}{{ readModel.classname }}{% endif %}|Response {
        try {
            return $this->queryBus->handle(
                new Query(
{% if parameters is defined and parameters|length > 0 %}
{% for param in parameters %}
{% if param.in == 'path' %}
                    Uuid::fromString(${{ param.name }}){% if parameters|filter(p => p.in == 'query')|length > 0 %},{% endif %}

{% endif %}
{% endfor %}
{% if parameters|filter(p => p.in == 'query')|length > 0 %}
                    new Criteria(
{% for param in parameters %}
{% if param.in == 'query' %}
                        ${{ param.name }}{% if not loop.last %},{% endif %}

{% endif %}
{% endfor %}
                    )
{% endif %}
{% endif %}
                )
            );
{% if parameters is defined and parameters|length > 0 and parameters|filter(p => p.in == 'path')|length > 0 %}
        } catch (InvalidUuidStringException) {
            return new Response(
                data: sprintf('Invalid {{ parameters|filter(p => p.in == 'path')|first.name }} uuid %s', ${{ parameters|filter(p => p.in == 'path')|first.name }}),
                status: ResponseAlias::HTTP_BAD_REQUEST
            );
{% endif %}
        } catch (\Exception $e) {
            return new Response(
                data: $e->getMessage(),
                status: ResponseAlias::HTTP_BAD_REQUEST
            );
        }
    }
}
{% else %}
final class {{ classname }} extends AbstractCommandBusController
{
    public function __invoke(
{% if resolver is defined %}
        #[MapRequestPayload(resolver: {{ resolver.classname }}::class)]
{% endif %}
{% if request is defined %}
        {{ request.classname }} $requestData,
{% endif %}
{% if parameters is defined and parameters|length > 0 %}
{% for param in parameters %}
{% if param.in == 'path' %}
        string ${{ param.name }},
{% endif %}
{% endfor %}
{% endif %}
    ): JsonResponse {
        try {
            $this->commandBus->handle(
                new Command(
{% if parameters is defined and parameters|length > 0 and parameters|filter(p => p.in == 'path')|length > 0 %}
                    array_merge(
                        [
{% for param in parameters %}
{% if param.in == 'path' %}
                            '{{ param.name }}' => ${{ param.name }},
{% endif %}
{% endfor %}
                        ],
{% if request is defined %}
                        $requestData->toArray()
{% endif %}
                    ),
{% else %}
{% if request is defined %}
                    $requestData->toArray(),
{% endif %}
{% endif %}
                )
            );

            return JsonResponse::ok();
        } catch (ValidationException $exception) {
            throw $exception;
{% if parameters is defined and parameters|length > 0 and parameters|filter(p => p.in == 'path')|length > 0 %}
        } catch (Throwable $exception) {
            return new JsonResponse([
                'code'    => Response::HTTP_BAD_REQUEST,
                'message' => $exception->getMessage(),
                'errors'  => [],
            ], Response::HTTP_BAD_REQUEST);
{% else %}
        } catch (Throwable $exception) {
            return new JsonResponse([
                'code'    => Response::HTTP_BAD_REQUEST,
                'message' => $exception->getMessage(),
                'errors'  => [],
            ], Response::HTTP_BAD_REQUEST);
{% endif %}
        }
    }
}
{% endif %}