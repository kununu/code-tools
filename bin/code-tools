#!/usr/bin/env bash

set -euo pipefail

# Constants
readonly CONFIG_DIR="vendor/kununu/code-tools"
readonly CONFIG_FILES=("dist/php-cs-fixer.php.dist" "dist/phpcs.xml.dist" "dist/rector.php.dist")

# Function to display help instructions
show_help() {
    cat <<EOF
Usage: vendor/bin/code-tools publish:config [tool-name]

Valid tool names:
  coding-standards   => copies dist/php-cs-fixer.php.dist
  code-sniffer       => copies dist/phpcs.xml.dist
  rector             => copies dist/rector.php.dist

If no tool name is passed, all config files will be copied.

Options:
  --help             Show this help message.
EOF
}

# Function to copy a config file
copy_config_file() {
    local source_file="$CONFIG_DIR/$1"
    local dest_file="${1#dist/}"
    dest_file="${dest_file%.dist}"

    if [[ -f "$dest_file" ]]; then
        echo "⚠️  Config file '$dest_file' already exists in your project."
    elif [[ -f "$source_file" ]]; then
        cp "$source_file" "$dest_file"
        echo "✅  '$dest_file' copied. You can customize it now."
    else
        echo "❌  Source config file '$source_file' does not exist."
    fi
}

# Show help if requested
if [[ "${1:-}" == "--help" ]]; then
    show_help
    exit 0
fi

# Validate arguments
if [[ $# -lt 1 || $# -gt 2 ]]; then
    show_help
    exit 1
fi

if [[ "$1" != "publish:config" ]]; then
    echo "❌  Invalid command. Use: publish:config"
    exit 1
fi

# Handle specific tool name or all
if [[ $# -eq 2 ]]; then
    case "$2" in
        coding-standards)
            copy_config_file "dist/php-cs-fixer.php.dist"
            ;;
        code-sniffer)
            copy_config_file "dist/phpcs.xml.dist"
            ;;
        rector)
            copy_config_file "dist/rector.php.dist"
            ;;
        *)
            echo "❌  Invalid tool name: '$2'. Valid names: coding-standards, code-sniffer, rector."
            exit 1
            ;;
    esac
else
    for config_file in "${CONFIG_FILES[@]}"; do
        copy_config_file "$config_file"
    done
fi
